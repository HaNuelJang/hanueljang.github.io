<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hanueljang.github.io//</id><title>기술정리 블로그</title><subtitle></subtitle> <updated>2022-05-24T11:38:57+09:00</updated> <author> <name>Hanuel Jang</name> <uri>https://hanueljang.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://hanueljang.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://hanueljang.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Hanuel Jang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>OAuth 2.0</title><link href="https://hanueljang.github.io//posts/OAuth2.0/" rel="alternate" type="text/html" title="OAuth 2.0" /><published>2022-05-16T11:59:10+09:00</published> <updated>2022-05-20T14:42:50+09:00</updated> <id>https://hanueljang.github.io//posts/OAuth2.0/</id> <content src="https://hanueljang.github.io//posts/OAuth2.0/" /> <author> <name>Hanuel Jang</name> </author> <category term="Server" /> <category term="Protocol" /> <summary> 목표 최근 어느 사이트, 앱, 게임등 로그인 시 간편로그인 또는 연동하여 가입하기 등의 회원가입/로그인 방식을 사용하고 있다. 왜 이런 기능이 생겨났고, 사용하고 있는지 알아보자. 다른 서비스의 자원을 효율적이고 안전하게 가져올 수 있는 방법 간편로그인, 연동을 통해 무엇을 하는가? 로그인 시 사용하는 간편로그인, 연동을 통해서 해당 서비스에서 무엇을 가져올까? 키워드를 확인해보자. 로그인, 간편로그인, 연동, 다른 서비스로 뽑을 수 있다. 나름 해석해본다면 A서비스에 로그인을 하기위해 간편로그인을 사용하고, 간편로그인으로 B서비스의 리소스(자원)를 가져와 사용하는것. 서비스는 다양해지고 새로운 서비스를 이용 할 때 마다 회원가입을 진행해야한다. 매번 회원가입을 진행해야하는 번거로움, 서비스... </summary> </entry> <entry><title>Bean Life-Cycle</title><link href="https://hanueljang.github.io//posts/Bean/" rel="alternate" type="text/html" title="Bean Life-Cycle" /><published>2022-05-04T11:59:10+09:00</published> <updated>2022-05-04T11:59:10+09:00</updated> <id>https://hanueljang.github.io//posts/Bean/</id> <content src="https://hanueljang.github.io//posts/Bean/" /> <author> <name>Hanuel Jang</name> </author> <category term="Spring" /> <category term="Spring Basic" /> <summary> 목표 Spring에서 Bean을 사용함으로써 언제 생성되고, 어떻게 사용되는지, 언제 소멸하는지에 대한 Life-Cycle을 파악하고, 각 단계에서 수행되는 기능들에 대해 알아본다. Bean Bean의 Life-Cycle은 Spring Container이 관리한다. 먼저 프로그램이 실행되면 Spring Container가 만들어진다. 해당 컨테이너에 관련된 Bean들이 생성되고, 이후 Bean들은 의존성 주입을 한다. 마지막으로 프로그램이 종료되면서 Bean들은 소멸단계를 거쳐 최종적으로 메모리에서 사라지게 된다. https://www.netjstech.com/2016/03/spring-bean-life-cycle.html 콜백 메소드 Bean 초기화시 또는 제거시 실행되는 콜백 메소드... </summary> </entry> <entry><title>(Servlet / Spring / Web Application) Context, Container</title><link href="https://hanueljang.github.io//posts/servlet/" rel="alternate" type="text/html" title="(Servlet / Spring / Web Application) Context, Container" /><published>2022-04-25T11:59:10+09:00</published> <updated>2022-04-29T11:35:54+09:00</updated> <id>https://hanueljang.github.io//posts/servlet/</id> <content src="https://hanueljang.github.io//posts/servlet/" /> <author> <name>Hanuel Jang</name> </author> <category term="Spring" /> <category term="Spring Basic" /> <summary> 계기 spring을 공부하던 도중 Context, Container의 정의에 대해 혼란이 생겼고, 관련 자료를 검색해보았다. 생각보다 이에 대해 지식이 부족한 것을 느꼈다. 그동안 서버를 개발하면서 Web의 기초적인 지식없이 비지니스 로직만 생각한것 같다. 각 단어들의 개념과 역할, 더불어 Web Server, WAS(Web Application Server), Spring의 전체적인 흐름을 파악하고 깊이있게 공부해 보고자 이 글을 작성하게 되었다. 목표 Spring으로 개념을 넓히기 위해 기반기술을 익힌다. Servlet Context, Servlet Container, Web Application Context, Spring Container… 등 각 개념과 역할을 파악한다. 전체적인... </summary> </entry> <entry><title>객체지향 설계 연습_1</title><link href="https://hanueljang.github.io//posts/step1/" rel="alternate" type="text/html" title="객체지향 설계 연습_1" /><published>2022-04-25T11:59:10+09:00</published> <updated>2022-04-27T13:54:20+09:00</updated> <id>https://hanueljang.github.io//posts/step1/</id> <content src="https://hanueljang.github.io//posts/step1/" /> <author> <name>Hanuel Jang</name> </author> <category term="Practice" /> <summary> 목표 시나리오를 토대로 간단한 커피 주문 프로그램을 설계해 본다. 복잡한 기능은 제외하고 필수적인 부분만 생각한다. 시나리오 손님이 가게를 들어온다. 손님은 메뉴판을 확인한다. 손님은 메뉴를 고른다. 손님은 금액을 지불한다. 손님은 커피를 주문한다. 바리스타는 손님의 주문을 확인한다. 바리스타는 주문받은 커피를 만든다. 바리스타는 만든 커피를 손님에게 준다. 손님은 커피를 받는다. 객체 도출 우선 시나리오에서 객체화 할 수 있는 대상을 찾아본다. 먼저 자주 등장하는 주 키워드를 탐색한다. 손님, 바리스타, 커피, 주문 다음 객체화 가능한 대상을 탐색한다. 메뉴판, 메뉴, 금액, 주문은 추후 추가하였다. 손님의 책임은 주문을 요청하고, 완성된 제품을 받으... </summary> </entry> <entry><title>프로그램_설계_1</title><link href="https://hanueljang.github.io//posts/Programming/" rel="alternate" type="text/html" title="프로그램_설계_1" /><published>2022-04-25T10:59:10+09:00</published> <updated>2022-04-25T15:45:33+09:00</updated> <id>https://hanueljang.github.io//posts/Programming/</id> <content src="https://hanueljang.github.io//posts/Programming/" /> <author> <name>Hanuel Jang</name> </author> <category term="Look back on" /> <summary> 들어가기에 앞서서… *_내가 글을 쓰게 된 계기 *_내가 하고있는 프로그래밍 방식과 문제점 *_내가 해야 할 개선방안 본 글은 나를 돌아보기 위해 작성된 글이다. 길면 길고 짧으면 짧은 경험기간이지만, 그동안 경험하고 느낀것을 정리해보고 그 토대로 앞으로의 나아갈 방향과 목표를 정하기 위해 글을 쓰게 되었다. 아직은 배워야 할 것이 산더미 처럼 뒤에 쌓여있다. 내가 쓰고자하는 것이 옳고 그름인지도 정확히 판별 할 수 없다. 하지만 조금씩 정리하고, 기초를 되돌아보고, 앞서나가 기술을 살펴보기도하고, 이렇게 다듬다 보면 나의 목표와 방향이 확실해 지지 않을까? 내가 글을 쓰게 된 계기 프로젝트의 시작은 고객의 요구사항으로부터. 요구사항을 토대로 프로그램의 아키텍쳐가 정해지고, 기본설계가 시작... </summary> </entry> </feed>
